schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

type Attestation {
  id: ID!
  schemaId: Bytes!
  replacedBy: Bytes!
  attester: Bytes!
  portal: Bytes!
  attestedDate: BigInt!
  expirationDate: BigInt!
  revocationDate: BigInt!
  version: BigInt!
  revoked: Boolean!
  subject: Bytes!
  encodedSubject: Bytes!
  attestationData: Bytes!
  schemaString: String
  decodedData: [String!]
}

input Attestation_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  schemaId: Bytes
  schemaId_not: Bytes
  schemaId_gt: Bytes
  schemaId_lt: Bytes
  schemaId_gte: Bytes
  schemaId_lte: Bytes
  schemaId_in: [Bytes!]
  schemaId_not_in: [Bytes!]
  schemaId_contains: Bytes
  schemaId_not_contains: Bytes
  replacedBy: Bytes
  replacedBy_not: Bytes
  replacedBy_gt: Bytes
  replacedBy_lt: Bytes
  replacedBy_gte: Bytes
  replacedBy_lte: Bytes
  replacedBy_in: [Bytes!]
  replacedBy_not_in: [Bytes!]
  replacedBy_contains: Bytes
  replacedBy_not_contains: Bytes
  attester: Bytes
  attester_not: Bytes
  attester_gt: Bytes
  attester_lt: Bytes
  attester_gte: Bytes
  attester_lte: Bytes
  attester_in: [Bytes!]
  attester_not_in: [Bytes!]
  attester_contains: Bytes
  attester_not_contains: Bytes
  portal: Bytes
  portal_not: Bytes
  portal_gt: Bytes
  portal_lt: Bytes
  portal_gte: Bytes
  portal_lte: Bytes
  portal_in: [Bytes!]
  portal_not_in: [Bytes!]
  portal_contains: Bytes
  portal_not_contains: Bytes
  attestedDate: BigInt
  attestedDate_not: BigInt
  attestedDate_gt: BigInt
  attestedDate_lt: BigInt
  attestedDate_gte: BigInt
  attestedDate_lte: BigInt
  attestedDate_in: [BigInt!]
  attestedDate_not_in: [BigInt!]
  expirationDate: BigInt
  expirationDate_not: BigInt
  expirationDate_gt: BigInt
  expirationDate_lt: BigInt
  expirationDate_gte: BigInt
  expirationDate_lte: BigInt
  expirationDate_in: [BigInt!]
  expirationDate_not_in: [BigInt!]
  revocationDate: BigInt
  revocationDate_not: BigInt
  revocationDate_gt: BigInt
  revocationDate_lt: BigInt
  revocationDate_gte: BigInt
  revocationDate_lte: BigInt
  revocationDate_in: [BigInt!]
  revocationDate_not_in: [BigInt!]
  version: BigInt
  version_not: BigInt
  version_gt: BigInt
  version_lt: BigInt
  version_gte: BigInt
  version_lte: BigInt
  version_in: [BigInt!]
  version_not_in: [BigInt!]
  revoked: Boolean
  revoked_not: Boolean
  revoked_in: [Boolean!]
  revoked_not_in: [Boolean!]
  subject: Bytes
  subject_not: Bytes
  subject_gt: Bytes
  subject_lt: Bytes
  subject_gte: Bytes
  subject_lte: Bytes
  subject_in: [Bytes!]
  subject_not_in: [Bytes!]
  subject_contains: Bytes
  subject_not_contains: Bytes
  encodedSubject: Bytes
  encodedSubject_not: Bytes
  encodedSubject_gt: Bytes
  encodedSubject_lt: Bytes
  encodedSubject_gte: Bytes
  encodedSubject_lte: Bytes
  encodedSubject_in: [Bytes!]
  encodedSubject_not_in: [Bytes!]
  encodedSubject_contains: Bytes
  encodedSubject_not_contains: Bytes
  attestationData: Bytes
  attestationData_not: Bytes
  attestationData_gt: Bytes
  attestationData_lt: Bytes
  attestationData_gte: Bytes
  attestationData_lte: Bytes
  attestationData_in: [Bytes!]
  attestationData_not_in: [Bytes!]
  attestationData_contains: Bytes
  attestationData_not_contains: Bytes
  schemaString: String
  schemaString_not: String
  schemaString_gt: String
  schemaString_lt: String
  schemaString_gte: String
  schemaString_lte: String
  schemaString_in: [String!]
  schemaString_not_in: [String!]
  schemaString_contains: String
  schemaString_contains_nocase: String
  schemaString_not_contains: String
  schemaString_not_contains_nocase: String
  schemaString_starts_with: String
  schemaString_starts_with_nocase: String
  schemaString_not_starts_with: String
  schemaString_not_starts_with_nocase: String
  schemaString_ends_with: String
  schemaString_ends_with_nocase: String
  schemaString_not_ends_with: String
  schemaString_not_ends_with_nocase: String
  decodedData: [String!]
  decodedData_not: [String!]
  decodedData_contains: [String!]
  decodedData_contains_nocase: [String!]
  decodedData_not_contains: [String!]
  decodedData_not_contains_nocase: [String!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Attestation_filter]
  or: [Attestation_filter]
}

enum Attestation_orderBy {
  id
  schemaId
  replacedBy
  attester
  portal
  attestedDate
  expirationDate
  revocationDate
  version
  revoked
  subject
  encodedSubject
  attestationData
  schemaString
  decodedData
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Counter {
  id: ID!
  attestations: Int
  modules: Int
  portals: Int
  schemas: Int
}

input Counter_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  attestations: Int
  attestations_not: Int
  attestations_gt: Int
  attestations_lt: Int
  attestations_gte: Int
  attestations_lte: Int
  attestations_in: [Int!]
  attestations_not_in: [Int!]
  modules: Int
  modules_not: Int
  modules_gt: Int
  modules_lt: Int
  modules_gte: Int
  modules_lte: Int
  modules_in: [Int!]
  modules_not_in: [Int!]
  portals: Int
  portals_not: Int
  portals_gt: Int
  portals_lt: Int
  portals_gte: Int
  portals_lte: Int
  portals_in: [Int!]
  portals_not_in: [Int!]
  schemas: Int
  schemas_not: Int
  schemas_gt: Int
  schemas_lt: Int
  schemas_gte: Int
  schemas_lte: Int
  schemas_in: [Int!]
  schemas_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Counter_filter]
  or: [Counter_filter]
}

enum Counter_orderBy {
  id
  attestations
  modules
  portals
  schemas
}

"""
8 bytes signed integer

"""
scalar Int8

type Issuer {
  id: ID!
}

input Issuer_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Issuer_filter]
  or: [Issuer_filter]
}

enum Issuer_orderBy {
  id
}

type Module {
  id: ID!
  moduleAddress: Bytes!
  name: String!
  description: String!
}

input Module_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  moduleAddress: Bytes
  moduleAddress_not: Bytes
  moduleAddress_gt: Bytes
  moduleAddress_lt: Bytes
  moduleAddress_gte: Bytes
  moduleAddress_lte: Bytes
  moduleAddress_in: [Bytes!]
  moduleAddress_not_in: [Bytes!]
  moduleAddress_contains: Bytes
  moduleAddress_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Module_filter]
  or: [Module_filter]
}

enum Module_orderBy {
  id
  moduleAddress
  name
  description
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Portal {
  id: ID!
  ownerAddress: Bytes!
  modules: [Bytes!]
  isRevocable: Boolean!
  name: String!
  description: String!
  ownerName: String!
  attestationCounter: Int
}

input Portal_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  ownerAddress: Bytes
  ownerAddress_not: Bytes
  ownerAddress_gt: Bytes
  ownerAddress_lt: Bytes
  ownerAddress_gte: Bytes
  ownerAddress_lte: Bytes
  ownerAddress_in: [Bytes!]
  ownerAddress_not_in: [Bytes!]
  ownerAddress_contains: Bytes
  ownerAddress_not_contains: Bytes
  modules: [Bytes!]
  modules_not: [Bytes!]
  modules_contains: [Bytes!]
  modules_contains_nocase: [Bytes!]
  modules_not_contains: [Bytes!]
  modules_not_contains_nocase: [Bytes!]
  isRevocable: Boolean
  isRevocable_not: Boolean
  isRevocable_in: [Boolean!]
  isRevocable_not_in: [Boolean!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  ownerName: String
  ownerName_not: String
  ownerName_gt: String
  ownerName_lt: String
  ownerName_gte: String
  ownerName_lte: String
  ownerName_in: [String!]
  ownerName_not_in: [String!]
  ownerName_contains: String
  ownerName_contains_nocase: String
  ownerName_not_contains: String
  ownerName_not_contains_nocase: String
  ownerName_starts_with: String
  ownerName_starts_with_nocase: String
  ownerName_not_starts_with: String
  ownerName_not_starts_with_nocase: String
  ownerName_ends_with: String
  ownerName_ends_with_nocase: String
  ownerName_not_ends_with: String
  ownerName_not_ends_with_nocase: String
  attestationCounter: Int
  attestationCounter_not: Int
  attestationCounter_gt: Int
  attestationCounter_lt: Int
  attestationCounter_gte: Int
  attestationCounter_lte: Int
  attestationCounter_in: [Int!]
  attestationCounter_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Portal_filter]
  or: [Portal_filter]
}

enum Portal_orderBy {
  id
  ownerAddress
  modules
  isRevocable
  name
  description
  ownerName
  attestationCounter
}

type Query {
  attestation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Attestation
  attestations(
    skip: Int = 0
    first: Int = 100
    orderBy: Attestation_orderBy
    orderDirection: OrderDirection
    where: Attestation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Attestation!]!
  module(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Module
  modules(
    skip: Int = 0
    first: Int = 100
    orderBy: Module_orderBy
    orderDirection: OrderDirection
    where: Module_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Module!]!
  portal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Portal
  portals(
    skip: Int = 0
    first: Int = 100
    orderBy: Portal_orderBy
    orderDirection: OrderDirection
    where: Portal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Portal!]!
  schema(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Schema
  schemas(
    skip: Int = 0
    first: Int = 100
    orderBy: Schema_orderBy
    orderDirection: OrderDirection
    where: Schema_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Schema!]!
  counter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Counter
  counters(
    skip: Int = 0
    first: Int = 100
    orderBy: Counter_orderBy
    orderDirection: OrderDirection
    where: Counter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Counter!]!
  issuer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Issuer
  issuers(
    skip: Int = 0
    first: Int = 100
    orderBy: Issuer_orderBy
    orderDirection: OrderDirection
    where: Issuer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Issuer!]!
  registryVersion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegistryVersion
  registryVersions(
    skip: Int = 0
    first: Int = 100
    orderBy: RegistryVersion_orderBy
    orderDirection: OrderDirection
    where: RegistryVersion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegistryVersion!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type RegistryVersion {
  id: ID!
  versionNumber: Int
  timestamp: BigInt
}

input RegistryVersion_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  versionNumber: Int
  versionNumber_not: Int
  versionNumber_gt: Int
  versionNumber_lt: Int
  versionNumber_gte: Int
  versionNumber_lte: Int
  versionNumber_in: [Int!]
  versionNumber_not_in: [Int!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RegistryVersion_filter]
  or: [RegistryVersion_filter]
}

enum RegistryVersion_orderBy {
  id
  versionNumber
  timestamp
}

type Schema {
  id: ID!
  name: String!
  description: String!
  context: String!
  schema: String!
  attestationCounter: Int
}

input Schema_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  description: String
  description_not: String
  description_gt: String
  description_lt: String
  description_gte: String
  description_lte: String
  description_in: [String!]
  description_not_in: [String!]
  description_contains: String
  description_contains_nocase: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  context: String
  context_not: String
  context_gt: String
  context_lt: String
  context_gte: String
  context_lte: String
  context_in: [String!]
  context_not_in: [String!]
  context_contains: String
  context_contains_nocase: String
  context_not_contains: String
  context_not_contains_nocase: String
  context_starts_with: String
  context_starts_with_nocase: String
  context_not_starts_with: String
  context_not_starts_with_nocase: String
  context_ends_with: String
  context_ends_with_nocase: String
  context_not_ends_with: String
  context_not_ends_with_nocase: String
  schema: String
  schema_not: String
  schema_gt: String
  schema_lt: String
  schema_gte: String
  schema_lte: String
  schema_in: [String!]
  schema_not_in: [String!]
  schema_contains: String
  schema_contains_nocase: String
  schema_not_contains: String
  schema_not_contains_nocase: String
  schema_starts_with: String
  schema_starts_with_nocase: String
  schema_not_starts_with: String
  schema_not_starts_with_nocase: String
  schema_ends_with: String
  schema_ends_with_nocase: String
  schema_not_ends_with: String
  schema_not_ends_with_nocase: String
  attestationCounter: Int
  attestationCounter_not: Int
  attestationCounter_gt: Int
  attestationCounter_lt: Int
  attestationCounter_gte: Int
  attestationCounter_lte: Int
  attestationCounter_in: [Int!]
  attestationCounter_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Schema_filter]
  or: [Schema_filter]
}

enum Schema_orderBy {
  id
  name
  description
  context
  schema
  attestationCounter
}

type Subscription {
  attestation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Attestation
  attestations(
    skip: Int = 0
    first: Int = 100
    orderBy: Attestation_orderBy
    orderDirection: OrderDirection
    where: Attestation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Attestation!]!
  module(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Module
  modules(
    skip: Int = 0
    first: Int = 100
    orderBy: Module_orderBy
    orderDirection: OrderDirection
    where: Module_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Module!]!
  portal(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Portal
  portals(
    skip: Int = 0
    first: Int = 100
    orderBy: Portal_orderBy
    orderDirection: OrderDirection
    where: Portal_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Portal!]!
  schema(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Schema
  schemas(
    skip: Int = 0
    first: Int = 100
    orderBy: Schema_orderBy
    orderDirection: OrderDirection
    where: Schema_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Schema!]!
  counter(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Counter
  counters(
    skip: Int = 0
    first: Int = 100
    orderBy: Counter_orderBy
    orderDirection: OrderDirection
    where: Counter_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Counter!]!
  issuer(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Issuer
  issuers(
    skip: Int = 0
    first: Int = 100
    orderBy: Issuer_orderBy
    orderDirection: OrderDirection
    where: Issuer_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Issuer!]!
  registryVersion(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RegistryVersion
  registryVersions(
    skip: Int = 0
    first: Int = 100
    orderBy: RegistryVersion_orderBy
    orderDirection: OrderDirection
    where: RegistryVersion_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [RegistryVersion!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}