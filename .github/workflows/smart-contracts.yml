name: Smart Contracts

on:
  pull_request:
    branches:
      - main
      - dev
      - release/*
  push:
    branches:
      - main
      - dev
      - release/*

env:
  FOUNDRY_PROFILE: ci

jobs:
  build:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: contracts

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Show the Foundry config
        run: forge config

      - name: Produce a build
        run: forge build

      - name: Add build summary
        run: |
          echo "## Build result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

  test-unit:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: contracts

    env:
      FOUNDRY_FUZZ_RUNS: 1000

    needs: build

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Run the unit tests
        run: forge test

      - name: Add test summary
        run: |
          echo "## Unit tests result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Passed" >> $GITHUB_STEP_SUMMARY

  coverage:
    runs-on: ubuntu-latest

    needs: build

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Generate the coverage report using the unit tests
        run: cd contracts && forge coverage --report lcov

      - name: Move the report at the root of the project
        run: mv contracts/lcov.info .

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true

      - name: Check test coverage
        uses: terencetcf/github-actions-lcov-minimum-coverage-checker@v1
        with:
          coverage-file: lcov.info
          minimum-coverage: 96

      - name: Add coverage summary
        run: |
          echo "## Coverage result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Uploaded to Codecov" >> $GITHUB_STEP_SUMMARY

  upgradeability:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: contracts

    needs: build

    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - id: check-changes
        run: |
          if [ -n "$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep '^contracts/')" ]; then
            echo "::set-output name=changed::true"
          else
            echo "::set-output name=changed::false"
          fi

      - name: Install Pnpm
        if: steps.check-changes.outputs.changed == 'true'
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Install Node.js
        if: steps.check-changes.outputs.changed == 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: pnpm

      - name: Get pnpm store directory
        if: steps.check-changes.outputs.changed == 'true'
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        if: steps.check-changes.outputs.changed == 'true'
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        if: steps.check-changes.outputs.changed == 'true'
        run: pnpm install --frozen-lockfile

      - name: Install Foundry
        if: steps.check-changes.outputs.changed == 'true'
        uses: foundry-rs/foundry-toolchain@v1

      - name: Check contracts implementations
        if: steps.check-changes.outputs.changed == 'true'
        run: pnpm run check:implementations

      - name: Create Linea testnet env file
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          cp ./env/.env.linea-goerli .env
          echo INFURA_KEY=${{ secrets.INFURA_KEY }} >> .env

      - name: Check contracts upgradeability on Linea testnet
        if: steps.check-changes.outputs.changed == 'true'
        run: pnpm run check:upgradeability linea-goerli

      - name: Create Linea mainnet env file
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          rm .env
          cp ./env/.env.linea .env
          echo INFURA_KEY=${{ secrets.INFURA_KEY }} >> .env

      - name: Check contracts upgradeability on Linea mainnet
        if: steps.check-changes.outputs.changed == 'true'
        run: pnpm run check:upgradeability linea

      - name: Create Arbitrum testnet env file
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          rm .env
          cp ./env/.env.arbitrum-goerli .env
          echo INFURA_KEY=${{ secrets.INFURA_KEY }} >> .env

      - name: Check contracts upgradeability on Arbitrum testnet
        if: steps.check-changes.outputs.changed == 'true'
        run: pnpm run check:upgradeability arbitrum-goerli

      - name: Create Arbitrum mainnet env file
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          rm .env
          cp ./env/.env.arbitrum .env
          echo INFURA_KEY=${{ secrets.INFURA_KEY }} >> .env

      - name: Check contracts upgradeability on Arbitrum mainnet
        if: steps.check-changes.outputs.changed == 'true'
        run: pnpm run check:upgradeability arbitrum

      - name: Add upgradeability summary
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          echo "## Upgradeability check result" >> $GITHUB_STEP_SUMMARY
          echo "✅ Contracts are upgradeable" >> $GITHUB_STEP_SUMMARY

      - name: Add upgradeability summary
        if: steps.check-changes.outputs.changed == 'false'
        run: |
          echo "## Upgradeability check result" >> $GITHUB_STEP_SUMMARY
          echo "✅ No change detected in the contracts" >> $GITHUB_STEP_SUMMARY
